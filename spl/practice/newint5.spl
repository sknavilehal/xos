alias physicalSP S0;
physicalSP = ([PTBR + 2*(SP/512)]*512) + SP%512;

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias parentPID S2;
parentPID = (PTBR - 1024)/8;

alias parentPCB S3;
parentPCB = READY_LIST + parentPID*32;

alias childPID S4;
alias childPTBR S5;
alias childPCB S6;
alias mem_index S7;
alias counter S9;
alias child_page_address S10;
alias parent_page_address S11;
alias childphysicalSP S12;
alias fileCount S13;
alias index S14;
alias aux S15;

childPID=0;
while([READY_LIST + childPID*32 + 1] != 0) do
    if(childPID == 32) then
		[physicalSP - 2] = -1;
		ireturn;
    endif;
    childPID = childPID + 1;
endwhile;

childPCB = READY_LIST + 32*childPID;
childPTBR = PAGE_TABLE + childPID*8;

// check for free memory in memory list
mem_index = 25;
while([MEM_LIST + mem_index] != 0 && mem_index < 64) do
    mem_index = mem_index + 1;
endwhile;

// page replacement algorithm
if(mem_index == 64) then
    counter = PAGE_TABLE;
    while(1) do
		if(counter%8 != 6 && [counter] != -1) then
			aux = [counter + 1];
			mem_index = [counter];
			
			if(aux == "11") then
				aux = "01";
			endif;

			if(aux == "01" && [MEM_LIST + mem_index] == 1) then
				index = 448;
				while([DISK_LIST + index] != 0) do
					if(index == 511) then
						print("no free swap");
						halt;
					endif;
					index = index + 1;
				endwhile;		

				store(mem_index, index);
				[DISK_LIST + index] = 1;

				[counter] = index;
				[counter + 1] = "00";

				break;
			endif;	    
		endif;

		counter = counter + 2;
		if(counter == 1280) then
			counter = 1024;
		endif;
    endwhile;
endif;


// copy contents of parent stack word by word to child stack
[MEM_LIST + mem_index] = 1;
parent_page_address = [PTBR + 6]*512;
child_page_address = mem_index*512;

counter=0;
while(counter < 512) do
    [child_page_address + counter] = [parent_page_address + counter];

    counter = counter + 1;
endwhile;

[childPTBR + 6] = mem_index;
[childPTBR + 7] = "01";

// create child's page table
counter=0;
while(counter < (PTLR - 1)) do
    mem_index = [PTBR + counter*2];
    aux = [PTBR + counter*2 + 1];
    
    [childPTBR + counter*2] = [PTBR + counter*2];
    [childPTBR + counter*2 + 1] = [PTBR + counter*2 + 1];

    if(aux%10 == 1) then
		[MEM_LIST + mem_index] = [MEM_LIST + mem_index] + 1;
    endif;
	if(mem_index > 447) then
	    [DISK_LIST + mem_index] = [DISK_LIST + mem_index] + 1;
	endif;
    store(6,20);

    counter = counter + 1;
endwhile;

// duplicate open files of parent
counter=0;
while(counter <8) do
    index = [parentPCB + 15 + counter*2]; 
    if(index != -1) then
		fileCount = [FILE_TABLE + index*2 + 1];
		fileCount = fileCount + 1;
		[FILE_TABLE + index*2 + 1] = fileCount;

		[childPCB + 15 + counter*2] = index;
		[childPCB + 15 + counter*2 + 1] = [parentPCB + 15 + counter*2 + 1];
    endif;
    counter = counter + 1;
endwhile;

[childPCB + 0] = childPID;
[childPCB + 1] = 1;
[childPCB + 2] = BP;
[childPCB + 3] = SP - 1;
[childPCB + 4] = [physicalSP];
[childPCB + 5] = childPTBR;
[childPCB + 6] = PTLR;
[childPCB + 7] = R0;
[childPCB + 8] = R1;
[childPCB + 9] = R2;
[childPCB + 10] = R3;
[childPCB + 11] = R4;
[childPCB + 12] = R5;
[childPCB + 13] = R6;
[childPCB + 14] = R7;
[childPCB + 31] = parentPID;

[physicalSP - 2] = childPID;

childphysicalSP = ([childPTBR + 2*(SP-1)/512]*512) + (SP-1)%512;
[childphysicalSP - 1] = -2;

breakpoint;

ireturn;
